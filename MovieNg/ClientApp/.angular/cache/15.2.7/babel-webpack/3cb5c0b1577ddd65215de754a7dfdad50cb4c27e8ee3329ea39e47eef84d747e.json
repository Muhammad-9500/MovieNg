{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.selectedMovie = null;\n    this.title = null;\n    this.movies = [];\n  }\n  searchMovie(title) {\n    const url = `${this.baseUrl}movie?title=${encodeURIComponent(this.title)}`;\n    return this.http.get(url).pipe(map(movies => {\n      // Transform the response if needed\n      this.movies = movies;\n      return movies;\n    }), catchError(error => {\n      console.error('Error:', error);\n      // Still return an empty movie array to avoid breaking the subscription chain\n      return throwError('An error occurred while searching for movies');\n    }));\n  }\n  toggleExtendedInfo(movie) {\n    if (this.selectedMovie === movie) {\n      this.selectedMovie = null; // Deselect the movie if it's already selected\n    } else {\n      this.selectedMovie = movie; // Select the clicked movie\n    }\n  }\n}\n\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJxB,YAAO,GAAGH,WAAW,CAACI,MAAM;IAIY,IAAI,CAACC,aAAa,GAAG,IAAI;IAAE,IAAI,CAACC,KAAK,GAAG,IAAI;IAAE,IAAI,CAACC,MAAM,GAAG,EAAE;EAAE;EAExGC,WAAW,CAACF,KAAa;IACvB,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,eAAeC,kBAAkB,CAAC,IAAI,CAACL,KAAM,CAAC,EAAE;IAC3E,OAAO,IAAI,CAACH,IAAI,CAACS,GAAG,CAAUH,GAAG,CAAC,CAACI,IAAI,CACrCd,GAAG,CAAEQ,MAAe,IAAI;MACtB;MACA,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpB,OAAOA,MAAM;IACf,CAAC,CAAC,EACFT,UAAU,CAAEgB,KAAwB,IAAI;MACtCC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B;MACA,OAAOjB,UAAU,CAAC,8CAA8C,CAAC;IACnE,CAAC,CAAC,CACH;EACH;EAEAmB,kBAAkB,CAACC,KAAY;IAC7B,IAAI,IAAI,CAACZ,aAAa,KAAKY,KAAK,EAAE;MAChC,IAAI,CAACZ,aAAa,GAAG,IAAI,CAAC,CAAC;KAC5B,MAAM;MACL,IAAI,CAACA,aAAa,GAAGY,KAAK,CAAC,CAAC;;EAEhC;;;AA9BWhB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAiB,SAAZjB,YAAY;EAAAkB,YAFX;AAAM","names":["throwError","catchError","map","environment","MovieService","constructor","http","apiUrl","selectedMovie","title","movies","searchMovie","url","baseUrl","encodeURIComponent","get","pipe","error","console","toggleExtendedInfo","movie","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MUHAMMAD SAIDU ABDUL\\source\\repos\\MovieNg\\MovieNg\\ClientApp\\src\\app\\_services\\MovieService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Movie } from '../__models/Movie';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MovieService {\r\n  selectedMovie: Movie | null;\r\n  baseUrl = environment.apiUrl;\r\n  title: string | null;\r\n  movies: Movie[];\r\n\r\n  constructor(private http: HttpClient) { this.selectedMovie = null; this.title = null; this.movies = []; }\r\n\r\n  searchMovie(title: string): Observable<Movie[]> {\r\n    const url = `${this.baseUrl}movie?title=${encodeURIComponent(this.title!)}`;\r\n    return this.http.get<Movie[]>(url).pipe(\r\n      map((movies: Movie[]) => {\r\n        // Transform the response if needed\r\n        this.movies = movies;\r\n        return movies;\r\n      }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error('Error:', error);\r\n        // Still return an empty movie array to avoid breaking the subscription chain\r\n        return throwError('An error occurred while searching for movies');\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleExtendedInfo(movie: Movie) {\r\n    if (this.selectedMovie === movie) {\r\n      this.selectedMovie = null; // Deselect the movie if it's already selected\r\n    } else {\r\n      this.selectedMovie = movie; // Select the clicked movie\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}